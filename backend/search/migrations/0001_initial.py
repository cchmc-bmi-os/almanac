# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-03-08 09:47
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Choice Text')),
                ('value', models.TextField(verbose_name='Choice Value')),
            ],
            options={
                'db_table': 'search_choices',
            },
        ),
        migrations.CreateModel(
            name='ChoiceDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(verbose_name='Version')),
                ('choice', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='search.Choice')),
            ],
            options={
                'db_table': 'search_choice_definitions',
            },
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, verbose_name='Value')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
            ],
            options={
                'db_table': 'search_codes',
            },
        ),
        migrations.CreateModel(
            name='CodeType',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('base_url', models.TextField(
                    blank=True, null=True, verbose_name='Base URL')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
            ],
            options={
                'db_table': 'search_code_types',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255, verbose_name='Label')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('ordering', models.IntegerField(verbose_name='Ordering')),
            ],
            options={
                'db_table': 'search_conditions',
            },
        ),
        migrations.CreateModel(
            name='ConditionCategory',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255, verbose_name='Label')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('ordering', models.IntegerField(verbose_name='Ordering')),
            ],
            options={
                'db_table': 'search_condition_categories',
            },
        ),
        migrations.CreateModel(
            name='Definition',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('definition', models.TextField(verbose_name='Semantic Definition')),
                ('note', models.TextField(blank=True,
                                          null=True, verbose_name='Definition Note')),
            ],
            options={
                'db_table': 'search_definitions',
            },
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Form name')),
                ('section', models.CharField(blank=True, max_length=255,
                                             null=True, verbose_name='Section Name')),
            ],
            options={
                'db_table': 'search_forms',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Question Name')),
                ('codes', models.ManyToManyField(
                    related_name='questions', to='search.Code')),
                ('conditions', models.ManyToManyField(
                    related_name='questions', to='search.Condition')),
            ],
            options={
                'db_table': 'search_questions',
            },
        ),
        migrations.CreateModel(
            name='QuestionDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(verbose_name='Version')),
                ('definition', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='search.Definition')),
                ('question', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='search.Question')),
            ],
            options={
                'db_table': 'search_question_definitions',
            },
        ),
        migrations.CreateModel(
            name='SavedCde',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('questions', django.contrib.postgres.fields.jsonb.JSONField()),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'search_saved_cdes',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Site Name')),
                ('display', models.CharField(
                    max_length=150, verbose_name='Site Display Name')),
                ('pi', models.CharField(max_length=255, verbose_name='Site PI')),
                ('is_live', models.BooleanField(
                    default=True, verbose_name='Site Live?')),
            ],
            options={
                'db_table': 'search_sites',
            },
        ),
        migrations.CreateModel(
            name='SiteQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('text', models.TextField(null=True, verbose_name='Text')),
                ('type', models.CharField(choices=[('integer', 'Integer'), ('text', 'Text'), ('checkbox', 'Checkbox'), ('yesno', 'Yes/No'), ('dropdown', 'Dropdown'), ('date_mdy', 'Date: MM/DD/YYYY'), ('date_dmy', 'Date: DD/MM/YYYY'), ('date_ymd', 'Date: YYYYY/MM/DD'), ('datetime_mdy', 'Datetime: MM/DD/YYYY HH:MM'), ('datetime_dmy', 'Datetime: DD/MM/YYYY HH:MM'), ('datetime_ymd', 'Datetime: YYYY/MM/DD HH:MM'), ('datetime_seconds_mdy', 'Datetime with seconds: MM/DD/YYYY HH:MM:SS'), ('datetime_seconds_dmy', 'Datetime with seconds: DD/MM/YYYY HH:MM:SS'), ('datetime_seconds_ymd', 'Datetime with seconds: YYYY/MM/DD HH:MM:SS'), ('email', 'Email'), ('alpha_only', 'Letters Only'), ('mrn_10d', 'MRN (10 digits)'), ('number', 'Number'), ('number_1dp',
umber with 1 Decimal Place'), ('number_2dp', 'Number with 2 Decimal Place'), ('number_3dp', 'Number with 3 Decimal Place'), ('number_4dp', 'Number with 4 Decimal Place'), ('phone_australia', 'Phone - Australia'), ('phone', 'Phone'), ('postalcode_australia', 'Postal Code - Australia'), ('postalcode_canada', 'Postal Code - Canada'), ('ssn', 'Social Security Number - U.S.'), ('time', 'Time: HH:MM'), ('time_mm_ss', 'Time: MM:SS'), ('vmrn', 'Vanderbilt MRN'), ('zipcode', 'Zipcode - U.S.'), ('truefalse', 'True/False'), ('notes', 'Note'), ('description', 'Descipriton'), ('sql', 'SQL Field'), ('radio', 'Radio Button'), ('calc', 'Calculated Field'), ('matrix', 'Matrix'), ('descriptive', 'Descriptive')], max_length=24, null=True, verbose_name='Type')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('min_val', models.FloatField(
                    blank=True, help_text='The minimum value a user can enter for this field, if applicable.', null=True, verbose_name='Minimun Value')),
                ('max_val', models.FloatField(
                    blank=True, help_text='The maximum value a user can enter for this field, if applicable.', null=True, verbose_name='Maximum Value')),
                ('calculation', models.TextField(
                    blank=True, help_text='If this field is a result of a calculation, enter it here', null=True, verbose_name='Calculation')),
                ('ordering', models.IntegerField(
                    null=True, verbose_name='Ordering')),
                ('align', models.CharField(blank=True, max_length=255,
                                           null=True, verbose_name='Alignment')),
                ('matrix_name', models.CharField(blank=True,
                                                 max_length=255, null=True, verbose_name='Matrix Name')),
                ('unknown_val', models.CharField(blank=True,
                                                 max_length=255, null=True, verbose_name='Unknown Value')),
                ('branching_logic', models.TextField(
                    blank=True, null=True, verbose_name='Branching Logic')),
            ],
            options={
                'db_table': 'search_site_questions',
            },
        ),
        migrations.CreateModel(
            name='SiteQuestionChoice',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.IntegerField(verbose_name='Ordering')),
                ('choice', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='search.Choice')),
                ('site_question', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='search.SiteQuestion')),
            ],
            options={
                'db_table': 'search_site_question_choices',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Source Name')),
                ('address', models.TextField(blank=True,
                                             null=True, verbose_name='Source Site Address')),
            ],
            options={
                'db_table': 'search_sources',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
            ],
            options={
                'db_table': 'search_tags',
            },
        ),
        migrations.CreateModel(
            name='TagLabel',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255,
                                           unique=True, verbose_name='Label')),
                ('type', models.CharField(choices=[('number', 'number'), ('text', 'text'), (
                    'date', 'date'), ('boolean', 'boolean')], max_length=50, verbose_name='Tag Type')),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'search_tag_labels',
            },
        ),
        migrations.AddField(
            model_name='tag',
            name='label',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='search.TagLabel', to_field='label'),
        ),
        migrations.AddField(
            model_name='sitequestion',
            name='choices',
            field=models.ManyToManyField(
                through='search.SiteQuestionChoice', to='search.Choice'),
        ),
        migrations.AddField(
            model_name='sitequestion',
            name='form',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='search.Form'),
        ),
        migrations.AddField(
            model_name='sitequestion',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    related_name='site_questions', to='search.Question'),
        ),
        migrations.AddField(
            model_name='sitequestion',
            name='site',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='search.Site'),
        ),
        migrations.AddField(
            model_name='sitequestion',
            name='tags',
            field=models.ManyToManyField(to='search.Tag'),
        ),
        migrations.AddField(
            model_name='question',
            name='definitions',
            field=models.ManyToManyField(
                related_name='questions', through='search.QuestionDefinition', to='search.Definition'),
        ),
        migrations.AddField(
            model_name='definition',
            name='source',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='search.Source'),
        ),
        migrations.AddField(
            model_name='condition',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    related_name='conditions', to='search.ConditionCategory'),
        ),
        migrations.AddField(
            model_name='codetype',
            name='source',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='search.Source'),
        ),
        migrations.AddField(
            model_name='code',
            name='code_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='search.CodeType'),
        ),
        migrations.AddField(
            model_name='choicedefinition',
            name='definition',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='search.Definition'),
        ),
        migrations.AddField(
            model_name='choice',
            name='definitions',
            field=models.ManyToManyField(
                through='search.ChoiceDefinition', to='search.Definition'),
        ),
    ]
